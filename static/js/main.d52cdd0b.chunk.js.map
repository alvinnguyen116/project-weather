{"version":3,"sources":["api.js","weather/weather.js","app/App.js","index.js"],"names":["getJSON","url","a","fetch","res","json","UNIT","Object","freeze","FAHRENHEIT","CELSIUS","KELVIN","DailyWeather","icon","temp","weather","dt","active","handleClick","min","max","Math","round","length","iconURL","day","Date","getDay","substring","className","onClick","style","backgroundImage","TimeLabel","hour","getHours","Weather","isGoogleReady","isD3Ready","isSearchMode","address","setInputVal","inputVal","BUTTON","TEMPERATURE","PRECIPITATION","WIND","useState","currentLocation","setCurrentLocation","currentUnit","setCurrentUnit","currentWeather","setCurrentWeather","currentDay","setCurrentDay","currentButton","setCurrentButton","svgRef","useRef","useEffect","hourly","data","slice","forEach","i","value","wind_speed","rain","push","svg","d3","select","current","attr","selectAll","remove","g","append","x","scaleTime","rangeRound","domain","ydomain","extent","map","d","y","scaleLinear","line","datum","units","lat","lon","API_KEY","getWeather","then","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","input","autocompleteService","google","maps","places","AutocompleteService","geoCoderService","Geocoder","getQueryPredictions","cb","predictions","status","PlacesServiceStatus","OK","description","geocode","location","geometry","lng","e","console","error","bind","getLocation","title","useMemo","split","join","daily","humidity","today","hours","todayString","fspan","cspan","dailyCards","props","key","timeLabels","filter","item","ref","App","script_url","history","useHistory","setIsGoogleReady","setIsD3Ready","isFocus","setIsFocus","setAddress","inputRef","onLoad","type","spellCheck","onChange","target","onKeyUp","keyCode","onFocus","onBlur","to","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d52cdd0b.chunk.js","sourcesContent":["/**\r\n * @param url - the url to fetch\r\n * @returns {Promise<any>}\r\n * @desc A utility function for fetching the JSON\r\n * response from an endpoint.\r\n */\r\nasync function getJSON(url) {\r\n    try {\r\n        const res = await fetch(url);\r\n        return await res.json();\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport const UNIT = Object.freeze({\r\n   FAHRENHEIT: \"imperial\",\r\n   CELSIUS: \"metric\",\r\n   KELVIN: \"kelvin\"\r\n});\r\n\r\nexport function getWeather({lat,lon}, units) {\r\n    const API_KEY = \"86ad87c076e4ca1d5d30d98e7ce72ced\";\r\n    if (units === UNIT.KELVIN) {\r\n        return getJSON(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=${API_KEY}`);\r\n    }\r\n    return getJSON(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=${units}&appid=${API_KEY}`);\r\n}","import React, {useEffect, useState, useRef, useMemo} from \"react\";\r\nimport {getWeather, UNIT} from \"../api\";\r\nimport './weather.scss';\r\n\r\n/**\r\n * @return {null}\r\n */\r\nfunction Weather({isGoogleReady, isD3Ready, isSearchMode, address, setInputVal, inputVal}) {\r\n\r\n    const BUTTON = Object.freeze({\r\n       TEMPERATURE: \"0\",\r\n       PRECIPITATION: \"1\",\r\n       WIND: \"2\"\r\n    });\r\n\r\n    const [currentLocation, setCurrentLocation] = useState();\r\n    const [currentUnit, setCurrentUnit] = useState(UNIT.FAHRENHEIT);\r\n    const [currentWeather, setCurrentWeather] = useState(null);\r\n    const [currentDay, setCurrentDay] = useState(0);\r\n    const [currentButton, setCurrentButton] = useState(BUTTON.TEMPERATURE);\r\n    const svgRef = useRef(null);\r\n\r\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\r\n\r\n    useEffect(() => {\r\n        /*global d3*/\r\n        if(isD3Ready && currentWeather && currentWeather.hourly && currentWeather.hourly.length) {\r\n            const width = 618;\r\n            const height = 56;\r\n            const data = [];\r\n            currentWeather.hourly.slice(0,24).forEach(({dt, temp, wind_speed, rain}, i) => {\r\n               let value;\r\n               switch (currentButton) {\r\n                   case BUTTON.TEMPERATURE:\r\n                       value = temp;\r\n                       break;\r\n                   case BUTTON.PRECIPITATION:\r\n                       value = rain ? rain['1h'] : 0;\r\n                       break;\r\n                   case BUTTON.WIND:\r\n                       value = wind_speed;\r\n                       break;\r\n                   default:\r\n                       break;\r\n               }\r\n               data.push({i,value});\r\n            });\r\n\r\n            const svg = d3.select(svgRef.current)\r\n                .attr(\"width\", width)\r\n                .attr(\"height\", height);\r\n            svg.selectAll(\"g\").remove();\r\n            const g = svg.append('g');\r\n\r\n            const x = d3.scaleTime()\r\n                .rangeRound([0, width])\r\n                .domain([0, 23]);\r\n            let ydomain = d3.extent(data.map(d => d.value));\r\n            if (currentButton === BUTTON.PRECIPITATION) {\r\n                ydomain = [0,1];\r\n            }\r\n            const y = d3.scaleLinear()\r\n                .rangeRound([height, 0])\r\n                .domain(ydomain);\r\n            const line = d3.line()\r\n                .x(d => x(d.i))\r\n                .y(d => Math.round(y(d.value)));\r\n\r\n            g.append(\"path\").datum(data)\r\n                .attr(\"stroke\", \"#ec6e4c\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"d\", line);\r\n        }\r\n    }, [currentWeather, isD3Ready, currentButton]);\r\n\r\n    useEffect(() => {\r\n        if (currentLocation) {\r\n            getWeather(currentLocation, currentUnit).then(setCurrentWeather);\r\n        } else {\r\n            setCurrentWeather(null);\r\n        }\r\n    }, [currentLocation, currentUnit]);\r\n\r\n    useEffect(() => {\r\n        if (!isSearchMode) {\r\n            navigator.geolocation.getCurrentPosition(pos => {\r\n                const {latitude: lat, longitude: lon} = pos.coords;\r\n                setCurrentLocation({lat, lon});\r\n                setInputVal(`${lat},${lon}`);\r\n            });\r\n        }\r\n    }, [isSearchMode]);\r\n\r\n    useEffect(() => {\r\n        if (isSearchMode && isGoogleReady && address) {\r\n            getLocation(address);\r\n        } else {\r\n            setCurrentLocation(null);\r\n        }\r\n    }, [address]);\r\n\r\n    // METHODS -----------------------------------------------------------------------------------------------------------\r\n\r\n    function getLocation(input) {\r\n        /*global google*/\r\n        if (!isGoogleReady) return;\r\n        const autocompleteService = new google.maps.places.AutocompleteService();\r\n        const geoCoderService = new google.maps.Geocoder();\r\n        const getLocationCB = (cb, predictions, status) => {\r\n            if (status !== google.maps.places.PlacesServiceStatus.OK) {\r\n                console.error(status);\r\n                return;\r\n            }\r\n            try {\r\n                const {description: address} = predictions[0];\r\n                geoCoderService.geocode({address}, (res) => {\r\n                    if (res && res.length) {\r\n                        const {location} = res[0].geometry;\r\n                        cb({lat:location.lat(), lon: location.lng()});\r\n                        setInputVal(address);\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                throw(e);\r\n            }\r\n        };\r\n        autocompleteService.getQueryPredictions({input}, getLocationCB.bind(null, setCurrentLocation));\r\n    }\r\n\r\n    const title = useMemo(() => inputVal.split(',').slice(-3).join(','), [currentWeather]);\r\n\r\n    if (currentWeather) {\r\n        const {current, daily, hourly} = currentWeather;\r\n        let {humidity, rain, dt, temp, wind_speed, weather} = current;\r\n        temp = Math.round(temp);\r\n        let description;\r\n        let icon;\r\n        if (weather && weather.length) {\r\n            description = weather[0].description;\r\n            icon = weather[0].icon;\r\n        }\r\n        const iconURL = `url(http://openweathermap.org/img/wn/${icon}@2x.png)`;\r\n        const today = new Date(dt*1000);\r\n        const weeks = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        const hours = today.getHours();\r\n        const todayString = `${weeks[today.getDay()]} ${hours % 12 ? hours % 12 : 12}:00 ${hours > 11 ? 'PM' : 'AM'}`;\r\n\r\n        let fspan = <span>°F</span>;\r\n        let cspan = <span>°C</span>;\r\n        if (currentUnit === UNIT.FAHRENHEIT) {\r\n            cspan = <div className={\"link\"} onClick={() => setCurrentUnit(UNIT.CELSIUS)}>{cspan}</div>;\r\n        } else {\r\n            fspan = <div className={\"link\"} onClick={() => setCurrentUnit(UNIT.FAHRENHEIT)}>{fspan}</div>;\r\n        }\r\n\r\n        const dailyCards = daily.map((props,i) =>\r\n            <DailyWeather {...props} key={props.dt} active={currentDay === i} handleClick={() => setCurrentDay(i)}/>\r\n        );\r\n\r\n        const timeLabels = hourly.slice(0,24).filter((item,i) => i % 3 === 1).map(({dt}) => <TimeLabel key={dt} dt={dt}/>);\r\n\r\n        return (\r\n            <div className={'weather'}>\r\n                <div className={'current'}>\r\n                    <div className={\"top\"}>\r\n                        <div className={\"title\"}>{isSearchMode ? title : ''}</div>\r\n                        <div className={\"time\"}>{todayString}</div>\r\n                        {description ? (<div className={\"description\"}>{description}</div>) : null}\r\n                    </div>\r\n                    <div className={\"middle\"}>\r\n                        <div className={\"temp-container\"}>\r\n                            {icon ? <div className={\"image\"} style={{backgroundImage:iconURL}}/> : null}\r\n                            <div className={\"temp\"}>{temp}</div>\r\n                            <div className={\"temp-options\"}>\r\n                                {fspan} &nbsp; | &nbsp; {cspan}\r\n                            </div>\r\n                        </div>\r\n                        <div className={\"right\"}>\r\n                            <div className={\"precipitation\"}>Precipitation: {`${rain ? rain['1h'] : 0}%`}</div>\r\n                            <div className={\"humidity\"}>Humidity: {`${humidity}%`}</div>\r\n                            <div className={\"wind\"}>Wind: {`${wind_speed} mph`}</div>\r\n                            <div className={\"buttons\"}>\r\n                                <button onClick={() => setCurrentButton(BUTTON.TEMPERATURE)}>Temperature</button>\r\n                                <button onClick={() => setCurrentButton(BUTTON.PRECIPITATION)}>Precipitation</button>\r\n                                <button onClick={() => setCurrentButton(BUTTON.WIND)}>Wind</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <svg ref={svgRef}/>\r\n                    <div className={\"time-labels\"}>\r\n                        {timeLabels}\r\n                    </div>\r\n                    <div className={\"bottom\"}>\r\n                        {dailyCards}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction DailyWeather({temp,weather,dt, active, handleClick}) {\r\n    let {min,max} = temp;\r\n    min = Math.round(min);\r\n    max = Math.round(max);\r\n    let icon;\r\n    if (weather && weather.length) {\r\n        icon = weather[0].icon;\r\n    }\r\n    const iconURL = `url(http://openweathermap.org/img/wn/${icon}@2x.png)`;\r\n    const today = new Date(dt*1000);\r\n    const weeks = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const day = weeks[today.getDay()].substring(0,3);\r\n    return (\r\n        <div className={`daily-weather ${active ? 'active' : ''}`} onClick={handleClick}>\r\n            <div className={\"day\"}>{day}</div>\r\n            {icon ? <div className={\"image\"} style={{backgroundImage:iconURL}}/> : null}\r\n            <div className={\"degrees\"}>\r\n                <span className={\"max\"}>{max}°</span>\r\n                <span>{min}°</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction TimeLabel({dt}) {\r\n    const today = new Date(dt*1000);\r\n    const hour = today.getHours();\r\n\r\n    return (\r\n        <div className={\"time-label\"}>\r\n            {hour % 12 === 0 ? 12 : hour % 12} {hour > 11 ? 'PM' : 'AM'}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Weather;","import React, {useState, useEffect, useRef} from 'react';\nimport Weather from \"../weather/weather\";\nimport {Link, Route, Switch, useHistory} from 'react-router-dom';\nimport Script from 'react-load-script';\nimport './App.scss';\n\n/**\n * @desc A top level app component for the weather app.\n */\nfunction App() {\n  // CONSTANTS ---------------------------------------------------------------------------------------------------------\n\n  const API_KEY = \"AIzaSyAuthaYK4K1L1pOCEDjPbKVlnL99KxvfmI\";\n  const script_url = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&libraries=places`;\n  const history = useHistory();\n\n  // COMPONENT STATE ---------------------------------------------------------------------------------------------------\n\n  const [isGoogleReady, setIsGoogleReady] = useState(false);\n  const [isD3Ready, setIsD3Ready] = useState(false);\n  const [isFocus, setIsFocus] = useState(false);\n  const [address, setAddress] = useState(null);\n  const [inputVal, setInputVal] = useState('');\n  const inputRef = useRef(null);\n\n  const props = {\n    isGoogleReady,\n    isD3Ready,\n    address,\n    inputVal,\n    setInputVal\n  };\n\n  const handleOnKeyUp = e => {\n    if (e.keyCode === 13) {\n      setAddress(inputVal);\n      history.push('/search');\n    }\n  };\n  return (\n        <div className=\"App\">\n          <Script url={script_url} onLoad={() => setIsGoogleReady(true)}/>\n          <Script url=\"https://d3js.org/d3.v4.min.js\" onLoad={() => setIsD3Ready(true)}/>\n          <div className={\"search\"}>\n            <div className={`search-container ${isFocus ? 'focus' : ''}`}>\n              <input type={\"text\"}\n                     ref={inputRef}\n                     value={inputVal}\n                     spellCheck={false}\n                     onChange={e => setInputVal(e.target.value)}\n                     onKeyUp={handleOnKeyUp}\n                     onFocus={() => setIsFocus(true)}\n                     onBlur={() => setIsFocus(false)}/>\n            </div>\n            <Link to={'/search'}>\n              <button onClick={() => {setAddress(inputVal)}}>Search</button>\n            </Link>\n          </div>\n            <Switch>\n              <Route path={\"/current\"}>\n                <Weather isSearchMode={false} {...props}/>\n              </Route>\n              <Route path={\"/search\"}>\n                <Weather isSearchMode={true} {...props}/>\n              </Route>\n            </Switch>\n        </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n          <App/>\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}